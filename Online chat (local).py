import asyncio
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import defer_call, info as session_info, run_async, run_js
from pywebio.platform.tornado import start_server as start_http_server
chat_msgs = []
online_users = set()
MAX_MESSAGES_COUNT = 100
PORT = 8080
async def main():
    global chat_msgs
    put_markdown("## ÔøΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω —á–∞—Ç!")
    put_markdown("**–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:**\n"
                 "1. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏ –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                 "   - –£–∑–Ω–∞—Ç—å –≤–∞—à –≤–Ω–µ—à–Ω–∏–π IP (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã —Ç–∏–ø–∞ 2ip.ru)\n"
                 "   - –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç {} –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
                 "   - –î–∞—Ç—å –¥—Ä—É–∑—å—è–º –∞–¥—Ä–µ—Å: http://[–≤–∞—à_IP]:{}\n"
                 "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ngrok/tunnel –¥–ª—è –ø—Ä–æ–±—Ä–æ—Å–∞ –ø–æ—Ä—Ç–∞".format(PORT, PORT))

    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)
    nickname = await input("–í–æ–π—Ç–∏ –≤ —á–∞—Ç", required=True, placeholder="–í–∞—à–µ –∏–º—è",
                           validate=lambda n: "–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!" if n in online_users or n == 'üì¢' else None)
    online_users.add(nickname)
    system_msg = f'üì¢ `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!'
    chat_msgs.append(('üì¢', system_msg))
    msg_box.append(put_markdown(system_msg))

    refresh_task = run_async(refresh_msg(nickname, msg_box))
    def on_close():
        if nickname in online_users:
            online_users.remove(nickname)
            leave_msg = f'üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'
            chat_msgs.append(('üì¢', leave_msg))
            if 'msg_box' in globals():
                msg_box.append(put_markdown(leave_msg))

    defer_call(on_close)
    while True:
        data = await input_group("üí≠ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
            input(placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ...", name="msg"),
            actions(name="cmd", buttons=[
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                {'label': "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", 'type': 'cancel'},
                {'label': "–°–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω", 'type': 'button', 'value': 'online'}
            ])
        ], validate=lambda m: ('msg', "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!") if m["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not m['msg'] else None)

        if data is None or data['cmd'] == 'cancel':
            break
        elif data['cmd'] == 'online':
            toast(f"–û–Ω–ª–∞–π–Ω: {', '.join(online_users)}", duration=3)
            continue
        msg = data['msg']
        chat_msgs.append((nickname, msg))
        msg_box.append(put_markdown(f"`{nickname}`: {msg}"))
    refresh_task.close()
    toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
    put_buttons(['–ü–µ—Ä–µ–∑–∞–π—Ç–∏'], onclick=lambda btn: run_js('window.location.reload()'))
async def refresh_msg(nickname, msg_box):
    global chat_msgs
    last_idx = len(chat_msgs)

    while True:
        await asyncio.sleep(0.5)
        for m in chat_msgs[last_idx:]:
            if m[0] != nickname:
                msg_box.append(put_markdown(f"`{m[0]}`: {m[1]}"))
        if len(chat_msgs) > MAX_MESSAGES_COUNT:
            chat_msgs = chat_msgs[len(chat_msgs) // 2:]
            last_idx = len(chat_msgs) // 2
        else:
            last_idx = len(chat_msgs)
if __name__ == "__main__":
    print(f"–°–µ—Ä–≤–µ—Ä —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    print(f"- –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: http://localhost:{PORT}")
    print(f"- –ò–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: http://[–≤–∞—à_–≤–Ω–µ—à–Ω–∏–π_IP]:{PORT} (–µ—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç)")
    start_http_server(main, port=PORT, host='0.0.0.0', debug=True, cdn=False)
